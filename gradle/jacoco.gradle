apply plugin: 'jacoco'

ext {
    jacocoExcludeList = ['**/*/ExcludedService.class']
    jacocoIncludeList = ['org.edu.ka.*']
    jacocoReportDir = "$buildDir/reports/jacoco"
    jacocoDestFile = "$buildDir/jacoco/jacocoTest.exec"
    jacocoClassDumps = "$buildDir/jacoco/classpathdumps"
}

jacoco {
    toolVersion = '0.7.4.201502262128'
    reportsDir = file(jacocoReportDir)
}

test {
    jacoco {
        includes = jacocoIncludeList
        destinationFile = file(jacocoDestFile)
        classDumpFile = file(jacocoClassDumps)
    }
}

task teamCityCodeCoverage(description: 'Used by TeamCity to generate code coverage report using all parameters defined in the build file') {
    doFirst {

        def relativeDestFile = jacocoDestFile - "${project.projectDir}${File.separatorChar}"
        def relativeClassPath = jacocoClassDumps - "${project.projectDir}${File.separatorChar}"

        def includeListStr = jacocoIncludeList.join(" ")
        def excludeListStr = jacocoExcludeList.join(" ")

        println("##teamcity[jacocoReport dataPath='${relativeDestFile}' includes='${includeListStr}' excludes='${excludeListStr}' classpath='+:${relativeClassPath}']")
    }

    mustRunAfter build
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }

    // Due to https://issues.gradle.org/browse/GRADLE-2955 we need this workaround to exclude the files
    // instead of using the plugin's "excludes" property
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, excludes: jacocoExcludeList)
        })
    }
}